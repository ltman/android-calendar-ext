plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        versionCode 18
        versionName "2.2.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        namespace "com.ltman.calendarext"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs_nio:2.0.3"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.7.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


//task androidJavadocsJar(type: Jar) {
//    archiveClassifier.set("javadoc")
//    from androidJavadocs.destinationDir
//}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

publishing {
    def githubProperties = new Properties()
    def githubPropertiesFile = "github.properties"
    if (rootProject.file(githubPropertiesFile).exists()) {
        //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file
        githubProperties.load(new FileInputStream(rootProject.file(githubPropertiesFile)))
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/ltman/android-calendar-ext")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        android.libraryVariants.all { variant ->
            def filename = "${archivesBaseName}-${variant.baseName}"
            println("Filename: $filename")
            "${variant.name}"(MavenPublication) {
                groupId 'com.ltman'
                artifactId = "calendar-ext"
                version = "${android.defaultConfig.versionName}"

                artifact file("$buildDir/outputs/aar/${filename}.aar")
//                artifact androidJavadocJar
                artifact androidSourcesJar

                pom.withXml {
                    // for dependencies and exclusions
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def configurationNames = ["implementation", "api", "runtimeOnly"]
                    configurationNames.each { confName ->
                        configurations[confName].allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
publish.dependsOn(assemble)



